import { configs } from "./configs.ts";
import { cache, Collection, Manager, snowflakeToBigint, ws } from "./deps.ts";
export const bot = {
  fullyReady: false,
  activeGuildIDs: new Set(),
  dispatchedGuildIDs: new Set(),
  dispatchedChannelIDs: new Set(),
  arguments: new Collection(),
  // deno-lint-ignore no-explicit-any
  commands: new Collection(),
  eventHandlers: {},
  guildPrefixes: new Collection(),
  guildLanguages: new Collection(),
  messageCollectors: new Collection(),
  reactionCollectors: new Collection(),
  buttonCollectors: new Collection(),
  inhibitors: new Collection(),
  monitors: new Collection(),
  permissionLevels: new Collection(),
  tasks: new Collection(),
  runningTasks: {
    initialTimeouts: [],
    intervals: [],
  },
  memberLastActive: new Collection(),
  musicQueues: new Collection(),
  loopingMusics: new Collection(),
  lavadenoManager: new Manager(configs.nodes, {
    send(id, payload) {
      const shardId = cache.guilds.get(snowflakeToBigint(id))?.shardId;
      if (shardId === undefined) return;
      ws.sendShardMessage(shardId, payload);
    },
  }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxmaWxlOi8vL2hvbWUvcnVubmVyL0Rpc2NvcmRCb3QvY2FjaGUudHM+Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3MgfSBmcm9tIFwiLi9jb25maWdzLnRzXCI7XG5pbXBvcnQge1xuICBib3RJZCxcbiAgY2FjaGUsXG4gIENvbGxlY3Rpb24sXG4gIERpc2NvcmRlbm9NZXNzYWdlLFxuICBNYW5hZ2VyLFxuICBzbm93Zmxha2VUb0JpZ2ludCxcbiAgVHJhY2ssXG4gIHdzLFxufSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQge1xuICBCdXR0b25Db2xsZWN0b3IsXG4gIE1lc3NhZ2VDb2xsZWN0b3IsXG4gIFJlYWN0aW9uQ29sbGVjdG9yLFxufSBmcm9tIFwiLi9zcmMvdHlwZXMvY29sbGVjdG9ycy50c1wiO1xuaW1wb3J0IHsgQXJndW1lbnQsIENvbW1hbmQsIFBlcm1pc3Npb25MZXZlbHMgfSBmcm9tIFwiLi9zcmMvdHlwZXMvY29tbWFuZHMudHNcIjtcbmltcG9ydCB7IEN1c3RvbUV2ZW50cyB9IGZyb20gXCIuL3NyYy90eXBlcy9ldmVudHMudHNcIjtcbmltcG9ydCB7IE1vbml0b3IgfSBmcm9tIFwiLi9zcmMvdHlwZXMvbW9uaXRvcnMudHNcIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi9zcmMvdHlwZXMvdGFza3MudHNcIjtcblxuZXhwb3J0IGNvbnN0IGJvdCA9IHtcbiAgZnVsbHlSZWFkeTogZmFsc2UsXG4gIGFjdGl2ZUd1aWxkSURzOiBuZXcgU2V0PGJpZ2ludD4oKSxcbiAgZGlzcGF0Y2hlZEd1aWxkSURzOiBuZXcgU2V0PGJpZ2ludD4oKSxcbiAgZGlzcGF0Y2hlZENoYW5uZWxJRHM6IG5ldyBTZXQ8YmlnaW50PigpLFxuICBhcmd1bWVudHM6IG5ldyBDb2xsZWN0aW9uPHN0cmluZywgQXJndW1lbnQ+KCksXG4gIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gIGNvbW1hbmRzOiBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIENvbW1hbmQ8YW55Pj4oKSxcbiAgZXZlbnRIYW5kbGVyczoge30gYXMgQ3VzdG9tRXZlbnRzLFxuICBndWlsZFByZWZpeGVzOiBuZXcgQ29sbGVjdGlvbjxiaWdpbnQsIHN0cmluZz4oKSxcbiAgZ3VpbGRMYW5ndWFnZXM6IG5ldyBDb2xsZWN0aW9uPGJpZ2ludCwgc3RyaW5nPigpLFxuICBtZXNzYWdlQ29sbGVjdG9yczogbmV3IENvbGxlY3Rpb248YmlnaW50LCBNZXNzYWdlQ29sbGVjdG9yPigpLFxuICByZWFjdGlvbkNvbGxlY3RvcnM6IG5ldyBDb2xsZWN0aW9uPGJpZ2ludCwgUmVhY3Rpb25Db2xsZWN0b3I+KCksXG4gIGJ1dHRvbkNvbGxlY3RvcnM6IG5ldyBDb2xsZWN0aW9uPGJpZ2ludCwgQnV0dG9uQ29sbGVjdG9yPigpLFxuICBpbmhpYml0b3JzOiBuZXcgQ29sbGVjdGlvbjxcbiAgICBzdHJpbmcsXG4gICAgKFxuICAgICAgbWVzc2FnZTogRGlzY29yZGVub01lc3NhZ2UsXG4gICAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgY29tbWFuZDogQ29tbWFuZDxhbnk+LFxuICAgICkgPT4gUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW5cbiAgPigpLFxuICBtb25pdG9yczogbmV3IENvbGxlY3Rpb248c3RyaW5nLCBNb25pdG9yPigpLFxuICBwZXJtaXNzaW9uTGV2ZWxzOiBuZXcgQ29sbGVjdGlvbjxcbiAgICBQZXJtaXNzaW9uTGV2ZWxzLFxuICAgIChcbiAgICAgIG1lc3NhZ2U6IERpc2NvcmRlbm9NZXNzYWdlLFxuICAgICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICAgIGNvbW1hbmQ6IENvbW1hbmQ8YW55PixcbiAgICApID0+IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuXG4gID4oKSxcbiAgdGFza3M6IG5ldyBDb2xsZWN0aW9uPHN0cmluZywgVGFzaz4oKSxcbiAgcnVubmluZ1Rhc2tzOiB7IGluaXRpYWxUaW1lb3V0czogW10gYXMgbnVtYmVyW10sIGludGVydmFsczogW10gYXMgbnVtYmVyW10gfSxcbiAgbWVtYmVyTGFzdEFjdGl2ZTogbmV3IENvbGxlY3Rpb248YmlnaW50LCBudW1iZXI+KCksXG4gIG11c2ljUXVldWVzOiBuZXcgQ29sbGVjdGlvbjxiaWdpbnQsIFRyYWNrW10+KCksXG4gIGxvb3BpbmdNdXNpY3M6IG5ldyBDb2xsZWN0aW9uPGJpZ2ludCwgYm9vbGVhbj4oKSxcbiAgbGF2YWRlbm9NYW5hZ2VyOiBuZXcgTWFuYWdlcihjb25maWdzLm5vZGVzLCB7XG4gICAgc2VuZChpZCwgcGF5bG9hZCkge1xuICAgICAgY29uc3Qgc2hhcmRJZCA9IGNhY2hlLmd1aWxkcy5nZXQoc25vd2ZsYWtlVG9CaWdpbnQoaWQpKT8uc2hhcmRJZDtcbiAgICAgIGlmIChzaGFyZElkID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgICAgd3Muc2VuZFNoYXJkTWVzc2FnZShzaGFyZElkLCBwYXlsb2FkKTtcbiAgICB9LFxuICB9KSxcbn07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQVMsT0FBTyxTQUFRLFlBQWM7U0FHcEMsS0FBSyxFQUNMLFVBQVUsRUFFVixPQUFPLEVBQ1AsaUJBQWlCLEVBRWpCLEVBQUUsU0FDRyxTQUFXO2FBV0wsR0FBRztJQUNkLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLGNBQWMsTUFBTSxHQUFHO0lBQ3ZCLGtCQUFrQixNQUFNLEdBQUc7SUFDM0Isb0JBQW9CLE1BQU0sR0FBRztJQUM3QixTQUFTLE1BQU0sVUFBVTtJQUN6QixFQUFtQyxBQUFuQyxpQ0FBbUM7SUFDbkMsUUFBUSxNQUFNLFVBQVU7SUFDeEIsYUFBYTs7SUFDYixhQUFhLE1BQU0sVUFBVTtJQUM3QixjQUFjLE1BQU0sVUFBVTtJQUM5QixpQkFBaUIsTUFBTSxVQUFVO0lBQ2pDLGtCQUFrQixNQUFNLFVBQVU7SUFDbEMsZ0JBQWdCLE1BQU0sVUFBVTtJQUNoQyxVQUFVLE1BQU0sVUFBVTtJQVExQixRQUFRLE1BQU0sVUFBVTtJQUN4QixnQkFBZ0IsTUFBTSxVQUFVO0lBUWhDLEtBQUssTUFBTSxVQUFVO0lBQ3JCLFlBQVk7UUFBSSxlQUFlO1FBQWtCLFNBQVM7O0lBQzFELGdCQUFnQixNQUFNLFVBQVU7SUFDaEMsV0FBVyxNQUFNLFVBQVU7SUFDM0IsYUFBYSxNQUFNLFVBQVU7SUFDN0IsZUFBZSxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSztRQUN4QyxJQUFJLEVBQUMsRUFBRSxFQUFFLE9BQU87a0JBQ1IsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxPQUFPO2dCQUM1RCxPQUFPLEtBQUssU0FBUztZQUV6QixFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE9BQU8ifQ==
