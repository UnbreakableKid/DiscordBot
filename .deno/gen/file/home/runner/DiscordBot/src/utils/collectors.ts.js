import { bot } from "../../cache.ts";
import { botId, snowflakeToBigint, structures } from "../../deps.ts";
import { Milliseconds } from "./constants/time.ts";
export async function needMessage(memberId, channelId, options) {
  const messages = await collectMessages({
    key: memberId,
    channelId,
    createdAt: Date.now(),
    filter: options?.filter || ((msg) => memberId === msg.authorId),
    amount: options?.amount || 1,
    duration: options?.duration || Milliseconds.MINUTE * 5,
  });
  return (options?.amount || 1) > 1 ? messages : messages[0];
}
export function collectMessages(options) {
  return new Promise((resolve, reject) => {
    bot.messageCollectors.get(options.key)?.reject(
      "A new collector began before the user responded to the previous one.",
    );
    bot.messageCollectors.set(options.key, {
      ...options,
      messages: [],
      resolve,
      reject,
    });
  });
}
export async function needReaction(memberId, messageId, options) {
  const reactions = await collectReactions({
    key: memberId,
    messageId,
    createdAt: Date.now(),
    filter: options?.filter || ((userId) => memberId === userId),
    amount: options?.amount || 1,
    duration: options?.duration || Milliseconds.MINUTE * 5,
  });
  return (options?.amount || 1) > 1 ? reactions : reactions[0];
}
export function collectReactions(options) {
  return new Promise((resolve, reject) => {
    bot.reactionCollectors.get(options.key)?.reject(
      "A new collector began before the user responded to the previous one.",
    );
    bot.reactionCollectors.set(options.key, {
      ...options,
      reactions: [],
      resolve,
      reject,
    });
  });
}
export function processReactionCollectors(message, emoji, userId) {
  // Ignore bot reactions
  if (userId === botId) return;
  const emojiName = emoji.id || emoji.name;
  if (!emojiName) return;
  const collector = bot.reactionCollectors.get(userId);
  if (!collector) return;
  // This user has no collectors pending or the message is in a different channel
  if (!collector || message.id !== collector.messageId) return;
  // This message is a response to a collector. Now running the filter function.
  if (!collector.filter(userId, emojiName, message)) return;
  // If the necessary amount has been collected
  if (
    collector.amount === 1 ||
    collector.amount === collector.reactions.length + 1
  ) {
    // Remove the collector
    bot.reactionCollectors.delete(userId);
    // Resolve the collector
    return collector.resolve([
      ...collector.reactions,
      emojiName,
    ]);
  }
  // More reactions still need to be collected
  collector.reactions.push(emojiName);
}
export async function needButton(memberId, messageId, options) {
  const buttons = await collectButtons({
    key: memberId,
    messageId,
    createdAt: Date.now(),
    filter: options?.filter ||
      ((_msg, member) => member ? memberId === member.id : true),
    amount: options?.amount || 1,
    duration: options?.duration || Milliseconds.MINUTE * 5,
  });
  return (options?.amount || 1) > 1 ? buttons : buttons[0];
}
export function collectButtons(options) {
  return new Promise((resolve, reject) => {
    bot.buttonCollectors.get(options.key)?.reject(
      "A new collector began before the user responded to the previous one.",
    );
    bot.buttonCollectors.set(options.key, {
      ...options,
      buttons: [],
      resolve,
      reject,
    });
  });
}
export async function processButtonCollectors(data, member) {
  // All buttons will require a message
  if (!data.message) return;
  // If this message is not pending a button response, we can ignore
  const collector = bot.buttonCollectors.get(
    member ? member.id : snowflakeToBigint(data.message.id),
  );
  if (!collector) return;
  // This message is a response to a collector. Now running the filter function.
  if (
    !collector.filter(
      await structures.createDiscordenoMessage(data.message),
      member,
    )
  ) {
    return;
  }
  // If the necessary amount has been collected
  if (
    collector.amount === 1 || collector.amount === collector.buttons.length + 1
  ) {
    // Remove the collector
    bot.buttonCollectors.delete(snowflakeToBigint(data.message.id));
    // Resolve the collector
    return collector.resolve([
      ...collector.buttons,
      {
        customId: data.data?.customId ||
          `No customId provided for this button.`,
        interaction: data,
        member,
      },
    ]);
  }
  // More buttons still need to be collected
  collector.buttons.push({
    customId: data.data?.customId || `No customId provided for this button.`,
    interaction: data,
    member,
  });
}
//# sourceMappingURL=data:application/json;base64,
