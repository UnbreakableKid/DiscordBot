export { preferredCharsets };
const simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
/**
 * Parse the Accept-Charset header.
 */ function parseAcceptCharset(accept) {
    const accepts = accept.split(",");
    const parsedAccepts = [];
    for(let i = 0; i < accepts.length; i++){
        const charset = parseCharset(accepts[i].trim(), i);
        if (charset) {
            parsedAccepts.push(charset);
        }
    }
    return parsedAccepts;
}
/**
 * Parse a charset from the Accept-Charset header.
 */ function parseCharset(str, i) {
    const match = simpleCharsetRegExp.exec(str);
    if (!match) return null;
    const charset = match[1];
    let q = 1;
    if (match[2]) {
        const params = match[2].split(";");
        for(let j = 0; j < params.length; j++){
            const p = params[j].trim().split("=");
            if (p[0] === "q") {
                q = parseFloat(p[1]);
                break;
            }
        }
    }
    return {
        charset,
        q: q,
        i: i
    };
}
/**
 * Get the priority of a charset.
 */ function getCharsetPriority(charset, accepted, index) {
    let priority = {
        o: -1,
        q: 0,
        s: 0
    };
    for(let i = 0; i < accepted.length; i++){
        const spec = specify(charset, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
            priority = spec;
        }
    }
    return priority;
}
/**
 * Get the specificity of the charset.
 */ function specify(charset, spec, index) {
    let s = 0;
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
        s |= 1;
    } else if (spec.charset !== "*") {
        return null;
    }
    return {
        i: index,
        o: spec.i,
        q: spec.q,
        s: s
    };
}
/**
 * Get the preferred charsets from an Accept-Charset header.
 */ function preferredCharsets(accept, provided) {
    // RFC 2616 sec 14.2: no header = *
    const accepts = parseAcceptCharset(accept === null ? "*" : accept || "");
    if (!provided) {
        // sorted list of all charsets
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
    }
    const priorities = provided.map(function getPriority(type, index) {
        return getCharsetPriority(type, accepts, index);
    });
    // sorted list of accepted charsets
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
        return provided[priorities.indexOf(priority)];
    });
}
/**
 * Compare two specs.
 */ function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
}
/**
 * Get full charset string.
 */ function getFullCharset(spec) {
    return spec.charset;
}
/**
 * Check if a spec has any quality.
 */ function isQuality(spec) {
    return spec.q > 0;
}
//# sourceMappingURL=data:application/json;base64,