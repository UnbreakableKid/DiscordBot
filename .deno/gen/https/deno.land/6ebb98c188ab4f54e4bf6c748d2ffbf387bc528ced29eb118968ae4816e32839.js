/**
 * Parse the `req` url with memoization.
 *
 * @param {Request} req
 * @return {ParsedURL}
 * @public
 */ export function parseUrl(req) {
  const url = req.url;
  if (url === undefined) {
    // URL is undefined
    return undefined;
  }
  let parsed = req._parsedUrl;
  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed;
  }
  // Parse the URL
  parsed = fastParse(url);
  parsed._raw = url;
  return req._parsedUrl = parsed;
}
/**
 * Parse the `req` original url with fallback and memoization.
 *
 * @param {Request} req
 * @return {Object}
 * @public
 */ export function originalUrl(req) {
  const url = req.originalUrl;
  if (typeof url !== "string") {
    // Fallback
    return parseUrl(req);
  }
  let parsed = req._parsedOriginalUrl;
  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed;
  }
  // Parse the URL
  parsed = fastParse(url);
  parsed._raw = url;
  return req._parsedOriginalUrl = parsed;
}
/**
 * Parse the `str` url with fast-path short-cut.
 *
 * @param {string} str
 * @return {ParsedURL}
 * @private
 */ function fastParse(str) {
  if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
    try {
      return new URL(str);
    } catch (_) {
      // Gracefully fallback to pattern matching.
    }
  }
  let pathname = str;
  let query = null;
  let search = null;
  // This takes the regexp from https://github.com/joyent/node/pull/7878
  // Which is /^(\/[^?#\s]*)(\?[^#\s]*)?$/
  // And unrolls it into a for loop
  for (let i = 1; i < str.length; i++) {
    switch (str.charCodeAt(i)) {
      case 63:
        /* ?  */ if (search === null) {
          pathname = str.substring(0, i);
          query = str.substring(i + 1);
          search = str.substring(i);
        }
        break;
      case 9:
      /* \t */
      case 10:
      /* \n */
      case 12:
      /* \f */
      case 13:
      /* \r */
      case 32:
      /*    */
      case 35:
      /* #  */
      case 160:
      case 65279:
        return new URL(str);
    }
  }
  const url = {};
  url.path = str || null;
  url.href = str || null;
  url.pathname = pathname || null;
  url.query = query || null;
  url.search = search || null;
  url.searchParams = new URLSearchParams(search || "");
  return url;
}
/**
 * Determine if parsed is still fresh for url.
 *
 * @param {string} url
 * @param {ParsedURL} parsedUrl
 * @return {boolean}
 * @private
 */ function fresh(url, parsedUrl) {
  return typeof parsedUrl === "object" && parsedUrl !== null &&
    parsedUrl._raw === url;
}
//# sourceMappingURL=data:application/json;base64,
