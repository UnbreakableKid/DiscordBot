import { eventHandlers } from "../bot.ts";
import { cache } from "../cache.ts";
import { channelOverwriteHasPermission } from "../helpers/channels/channel_overwrite_has_permission.ts";
import { cloneChannel } from "../helpers/channels/clone_channel.ts";
import { deleteChannel } from "../helpers/channels/delete_channel.ts";
import { deleteChannelOverwrite } from "../helpers/channels/delete_channel_overwrite.ts";
import { editChannel } from "../helpers/channels/edit_channel.ts";
import { editChannelOverwrite } from "../helpers/channels/edit_channel_overwrite.ts";
import { sendMessage } from "../helpers/messages/send_message.ts";
import { disconnectMember } from "../helpers/mod.ts";
import { snowflakeToBigint } from "../util/bigint.ts";
import { Collection } from "../util/collection.ts";
import { createNewProp } from "../util/utils.ts";
const CHANNEL_SNOWFLAKES = [
  "id",
  "guildId",
  "lastMessageId",
  "ownerId",
  "applicationId",
  "parentId",
];
const baseChannel = {
  get guild() {
    return cache.guilds.get(this.guildId);
  },
  get messages() {
    return cache.messages.filter((m) => m.channelId === this.id);
  },
  get mention() {
    return `<#${this.id}>`;
  },
  get voiceStates() {
    return this.guild?.voiceStates.filter((voiceState) =>
      voiceState.channelId === this.id
    );
  },
  get connectedMembers() {
    const voiceStates = this.voiceStates;
    if (!voiceStates) return undefined;
    return new Collection(voiceStates.map((vs) => [
      vs.userId,
      cache.members.get(vs.userId),
    ]));
  },
  send(content) {
    return sendMessage(this.id, content);
  },
  disconnect(memberId) {
    return disconnectMember(this.guildId, memberId);
  },
  delete(reason) {
    return deleteChannel(this.id, reason);
  },
  editOverwrite(id, options) {
    return editChannelOverwrite(this.guildId, this.id, id, options);
  },
  deleteOverwrite(id) {
    return deleteChannelOverwrite(this.guildId, this.id, id);
  },
  hasPermission(overwrites, permissions) {
    return channelOverwriteHasPermission(
      this.guildId,
      this.id,
      overwrites,
      permissions,
    );
  },
  edit(options, reason) {
    return editChannel(this.id, options, reason);
  },
  clone(reason) {
    return cloneChannel(this.id, reason);
  },
};
/** Create a structure object  */
// deno-lint-ignore require-await
export async function createDiscordenoChannel(data, guildId) {
  const { lastPinTimestamp, permissionOverwrites = [], ...rest } = data;
  const props = {};
  Object.entries(rest).forEach(([key, value]) => {
    eventHandlers.debug?.(
      "loop",
      `Running forEach loop in createDiscordenoChannel function.`,
    );
    props[key] = createNewProp(
      CHANNEL_SNOWFLAKES.includes(key)
        ? value ? snowflakeToBigint(value) : undefined
        : value,
    );
  });
  // Set the guildId seperately because sometimes guildId is not included
  props.guildId = createNewProp(
    snowflakeToBigint(guildId?.toString() || data.guildId || ""),
  );
  const channel = Object.create(baseChannel, {
    ...props,
    lastPinTimestamp: createNewProp(
      lastPinTimestamp ? Date.parse(lastPinTimestamp) : undefined,
    ),
    permissionOverwrites: createNewProp(permissionOverwrites.map((o) => ({
      ...o,
      id: snowflakeToBigint(o.id),
      allow: snowflakeToBigint(o.allow),
      deny: snowflakeToBigint(o.deny),
    }))),
  });
  return channel;
}
//# sourceMappingURL=data:application/json;base64,
