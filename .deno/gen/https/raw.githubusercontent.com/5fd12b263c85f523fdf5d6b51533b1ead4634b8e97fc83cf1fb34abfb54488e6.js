import { eventHandlers } from "../bot.ts";
import { cache, cacheHandlers } from "../cache.ts";
import { avatarURL } from "../helpers/members/avatar_url.ts";
import { banMember } from "../helpers/members/ban_member.ts";
import { editMember } from "../helpers/members/edit_member.ts";
import { kickMember } from "../helpers/members/kick_member.ts";
import { sendDirectMessage } from "../helpers/members/send_direct_message.ts";
import { addRole } from "../helpers/roles/add_role.ts";
import { removeRole } from "../helpers/roles/remove_role.ts";
import { snowflakeToBigint } from "../util/bigint.ts";
import { Collection } from "../util/collection.ts";
import { iconHashToBigInt } from "../util/hash.ts";
import { createNewProp } from "../util/utils.ts";
const MEMBER_SNOWFLAKES = [
  "id",
  "discriminator",
];
export const memberToggles = {
  /** Whether the user belongs to an OAuth2 application */ bot: 1n,
  /** Whether the user is an Official Discord System user (part of the urgent message system) */ system:
    2n,
  /** Whether the user has two factor enabled on their account */ mfaEnabled:
    4n,
  /** Whether the email on this account has been verified */ verified: 8n,
  /** Whether the users avatar is animated. */ animatedAvatar: 16n,
};
const baseMember = {
  get avatarURL() {
    return avatarURL(this.id, this.discriminator, {
      avatar: this.avatar,
      animated: this.animatedAvatar,
    });
  },
  get mention() {
    return `<@!${this.id}>`;
  },
  get tag() {
    return `${this.username}#${this.discriminator}`;
  },
  // METHODS
  makeAvatarURL(options) {
    return avatarURL(this.id, this.discriminator, {
      avatar: this.avatar,
      size: options?.size,
      format: options?.format,
      animated: this.animatedAvatar,
    });
  },
  guild(guildId) {
    return cache.guilds.get(guildId);
  },
  name(guildId) {
    return this.guildMember(guildId)?.nick || this.username;
  },
  guildMember(guildId) {
    return this.guilds?.get(guildId);
  },
  sendDM(content) {
    return sendDirectMessage(this.id, content);
  },
  kick(guildId, reason) {
    return kickMember(guildId, this.id, reason);
  },
  edit(guildId, options) {
    return editMember(guildId, this.id, options);
  },
  ban(guildId, options) {
    return banMember(guildId, this.id, options);
  },
  addRole(guildId, roleId, reason) {
    return addRole(guildId, this.id, roleId, reason);
  },
  removeRole(guildId, roleId, reason) {
    return removeRole(guildId, this.id, roleId, reason);
  },
  get bot() {
    return Boolean(this.bitfield & memberToggles.bot);
  },
  get system() {
    return Boolean(this.bitfield & memberToggles.system);
  },
  get mfaEnabled() {
    return Boolean(this.bitfield & memberToggles.mfaEnabled);
  },
  get verified() {
    return Boolean(this.bitfield & memberToggles.verified);
  },
  get animatedAvatar() {
    return Boolean(this.bitfield & memberToggles.animatedAvatar);
  },
};
export async function createDiscordenoMember( // The `user` param in `DiscordGuildMember` is optional since discord does not send it in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events. But this data in there is required to build this structure so it is required in this case
  data,
  guildId,
) {
  const { user, joinedAt, premiumSince } = data;
  let bitfield = 0n;
  const props = {};
  for (const [key, value] of Object.entries(user)) {
    eventHandlers.debug?.(
      "loop",
      `Running for of for Object.keys(user) loop in DiscordenoMember function.`,
    );
    const toggleBits = memberToggles[key];
    if (toggleBits) {
      bitfield |= value ? toggleBits : 0n;
      continue;
    }
    if (key === "avatar") {
      const transformed = value ? iconHashToBigInt(value) : undefined;
      if (transformed?.animated) bitfield |= memberToggles.animatedAvatar;
      props.avatar = createNewProp(transformed?.bigint);
    }
    props[key] = createNewProp(
      MEMBER_SNOWFLAKES.includes(key)
        ? value ? snowflakeToBigint(value) : undefined
        : value,
    );
  }
  const member = Object.create(baseMember, {
    ...props,
    /** The guild related data mapped by guild id */ guilds: createNewProp(
      new Collection(),
    ),
    bitfield: createNewProp(bitfield),
  });
  const cached = await cacheHandlers.get("members", snowflakeToBigint(user.id));
  if (cached) {
    for (const [id, guild] of cached.guilds.entries()) {
      eventHandlers.debug?.(
        "loop",
        `Running for of for cached.guilds.entries() loop in DiscordenoMember function.`,
      );
      member.guilds.set(id, guild);
    }
  }
  // User was never cached before
  member.guilds.set(guildId, {
    nick: data.nick,
    roles: data.roles.map((id) => snowflakeToBigint(id)),
    joinedAt: joinedAt ? Date.parse(joinedAt) : undefined,
    premiumSince: premiumSince ? Date.parse(premiumSince) : undefined,
    deaf: data.deaf,
    mute: data.mute,
  });
  return member;
}
//# sourceMappingURL=data:application/json;base64,
