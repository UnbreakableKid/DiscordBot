import { eventHandlers } from "../bot.ts";
import { cache, cacheHandlers } from "../cache.ts";
import { sendDirectMessage } from "../helpers/members/send_direct_message.ts";
import { addReaction } from "../helpers/messages/add_reaction.ts";
import { addReactions } from "../helpers/messages/add_reactions.ts";
import { deleteMessage } from "../helpers/messages/delete_message.ts";
import { editMessage } from "../helpers/messages/edit_message.ts";
import { pinMessage } from "../helpers/messages/pin_message.ts";
import { removeAllReactions } from "../helpers/messages/remove_all_reactions.ts";
import { removeReaction } from "../helpers/messages/remove_reaction.ts";
import { removeReactionEmoji } from "../helpers/messages/remove_reaction_emoji.ts";
import { sendMessage } from "../helpers/messages/send_message.ts";
import { bigintToSnowflake, snowflakeToBigint } from "../util/bigint.ts";
import { CHANNEL_MENTION_REGEX } from "../util/constants.ts";
import { createNewProp } from "../util/utils.ts";
const MESSAGE_SNOWFLAKES = [
  "id",
  "channelId",
  "guildId",
  "webhookId",
  "applicationId",
];
const messageToggles = {
  /** Whether this was a TTS message */ tts: 1n,
  /** Whether this message mentions everyone */ mentionEveryone: 2n,
  /** Whether this message is pinned */ pinned: 4n,
};
const baseMessage = {
  get channel() {
    if (this.guildId) return cache.channels.get(this.channelId);
    return cache.channels.get(this.authorId);
  },
  get guild() {
    if (!this.guildId) return undefined;
    return cache.guilds.get(this.guildId);
  },
  get member() {
    if (!this.authorId) return undefined;
    return cache.members.get(this.authorId);
  },
  get guildMember() {
    if (!this.guildId) return undefined;
    return this.member?.guilds.get(this.guildId);
  },
  get link() {
    return `https://discord.com/channels/${this.guildId ||
      "@me"}/${this.channelId}/${this.id}`;
  },
  get mentionedRoles() {
    return this.mentionedRoleIds?.map((id) => this.guild?.roles.get(id)) || [];
  },
  get mentionedChannels() {
    return this.mentionedChannelIds?.map((id) => cache.channels.get(id)) || [];
  },
  get mentionedMembers() {
    return this.mentionedUserIds?.map((id) => cache.members.get(id)) || [];
  },
  // METHODS
  delete(reason, delayMilliseconds) {
    return deleteMessage(this.channelId, this.id, reason, delayMilliseconds);
  },
  edit(content) {
    return editMessage(this, content);
  },
  pin() {
    return pinMessage(this.channelId, this.id);
  },
  addReaction(reaction) {
    return addReaction(this.channelId, this.id, reaction);
  },
  addReactions(reactions, ordered) {
    return addReactions(this.channelId, this.id, reactions, ordered);
  },
  reply(content) {
    const contentWithMention = typeof content === "string"
      ? {
        content,
        allowedMentions: {
          repliedUser: true,
        },
        messageReference: {
          messageId: bigintToSnowflake(this.id),
          failIfNotExists: false,
        },
      }
      : {
        ...content,
        allowedMentions: {
          ...content.allowedMentions || {},
          repliedUser: true,
        },
        messageReference: {
          messageId: bigintToSnowflake(this.id),
          failIfNotExists: content.messageReference?.failIfNotExists === true,
        },
      };
    if (this.guildId) return sendMessage(this.channelId, contentWithMention);
    return sendDirectMessage(this.authorId, contentWithMention);
  },
  send(content) {
    if (this.guildId) return sendMessage(this.channelId, content);
    return sendDirectMessage(this.authorId, content);
  },
  async alert(content, timeout = 10, reason = "") {
    if (this.guildId) {
      return await sendMessage(this.channelId, content).then((response) => {
        response.delete(reason, timeout * 1000).catch(console.error);
      });
    }
    return await sendDirectMessage(this.authorId, content).then((response) => {
      response.delete(reason, timeout * 1000).catch(console.error);
    });
  },
  async alertReply(content, timeout = 10, reason = "") {
    return await this.reply(content).then((response) =>
      response.delete(reason, timeout * 1000).catch(console.error)
    );
  },
  removeAllReactions() {
    return removeAllReactions(this.channelId, this.id);
  },
  removeReactionEmoji(reaction) {
    return removeReactionEmoji(this.channelId, this.id, reaction);
  },
  removeReaction(reaction, userId) {
    return removeReaction(this.channelId, this.id, reaction, {
      userId,
    });
  },
  get tts() {
    return Boolean(this.bitfield & messageToggles.tts);
  },
  get mentionEveryone() {
    return Boolean(this.bitfield & messageToggles.mentionEveryone);
  },
  get pinned() {
    return Boolean(this.bitfield & messageToggles.pinned);
  },
};
export async function createDiscordenoMessage(data) {
  const {
    guildId = "",
    mentionChannels = [],
    mentions = [],
    mentionRoles = [],
    editedTimestamp,
    author,
    messageReference,
    ...rest
  } = data;
  let bitfield = 0n;
  const props = {};
  for (const [key, value] of Object.entries(rest)) {
    eventHandlers.debug?.(
      "loop",
      `Running for of loop in createDiscordenoMessage function.`,
    );
    const toggleBits = messageToggles[key];
    if (toggleBits) {
      bitfield |= value ? toggleBits : 0n;
      continue;
    }
    // Don't add member to props since it would overwrite the message.member getter
    if (key === "member") continue;
    props[key] = createNewProp(
      MESSAGE_SNOWFLAKES.includes(key)
        ? value ? snowflakeToBigint(value) : undefined
        : value,
    );
  }
  props.authorId = createNewProp(snowflakeToBigint(author.id));
  props.isBot = createNewProp(author.bot || false);
  props.tag = createNewProp(`${author.username}#${author.discriminator}`);
  // Discord doesnt give guild id for getMessage() so this will fill it in
  const guildIdFinal = snowflakeToBigint(guildId) ||
    (await cacheHandlers.get("channels", snowflakeToBigint(data.channelId)))
      ?.guildId ||
    0n;
  const message = Object.create(baseMessage, {
    ...props,
    content: createNewProp(data.content || ""),
    guildId: createNewProp(guildIdFinal),
    mentionedUserIds: createNewProp(
      mentions.map((m) => snowflakeToBigint(m.id)),
    ),
    mentionedRoleIds: createNewProp(
      mentionRoles.map((id) => snowflakeToBigint(id)),
    ),
    mentionedChannelIds: createNewProp([
      // Keep any ids that discord sends
      ...mentionChannels.map((m) => snowflakeToBigint(m.id)),
      // Add any other ids that can be validated in a channel mention format
      ...(rest.content?.match(CHANNEL_MENTION_REGEX) || []).map((text) =>
        // converts the <#123> into 123
        snowflakeToBigint(text.substring(2, text.length - 1))
      ),
    ]),
    timestamp: createNewProp(Date.parse(data.timestamp)),
    editedTimestamp: createNewProp(
      editedTimestamp ? Date.parse(editedTimestamp) : undefined,
    ),
    messageReference: createNewProp(
      messageReference
        ? {
          messageId: messageReference.messageId
            ? snowflakeToBigint(messageReference.messageId)
            : undefined,
          channelId: messageReference.channelId
            ? snowflakeToBigint(messageReference.channelId)
            : undefined,
          guildId: messageReference.guildId
            ? snowflakeToBigint(messageReference.guildId)
            : undefined,
        }
        : undefined,
    ),
    bitfield: createNewProp(bitfield),
  });
  return message;
}
//# sourceMappingURL=data:application/json;base64,
