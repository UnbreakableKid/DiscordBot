import { rest } from "../../rest/rest.ts";
import { structures } from "../../structures/mod.ts";
import { Errors } from "../../types/discordeno/errors.ts";
import { endpoints } from "../../util/constants.ts";
import { requireBotChannelPermissions } from "../../util/permissions.ts";
/** Fetches between 2-100 messages. Requires VIEW_CHANNEL and READ_MESSAGE_HISTORY */ export async function getMessages(
  channelId,
  options,
) {
  await requireBotChannelPermissions(channelId, [
    "VIEW_CHANNEL",
    "READ_MESSAGE_HISTORY",
  ]);
  if (options?.limit && (options.limit < 0 || options.limit > 100)) {
    throw new Error(Errors.INVALID_GET_MESSAGES_LIMIT);
  }
  const result = await rest.runMethod(
    "get",
    endpoints.CHANNEL_MESSAGES(channelId),
    options,
  );
  return await Promise.all(
    result.map((res) => structures.createDiscordenoMessage(res)),
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZGlzY29yZGVuby9kaXNjb3JkZW5vL21haW4vc3JjL2hlbHBlcnMvbWVzc2FnZXMvZ2V0X21lc3NhZ2VzLnRzPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXN0IH0gZnJvbSBcIi4uLy4uL3Jlc3QvcmVzdC50c1wiO1xuaW1wb3J0IHsgc3RydWN0dXJlcyB9IGZyb20gXCIuLi8uLi9zdHJ1Y3R1cmVzL21vZC50c1wiO1xuaW1wb3J0IHsgRXJyb3JzIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Rpc2NvcmRlbm8vZXJyb3JzLnRzXCI7XG5pbXBvcnQge1xuICBHZXRNZXNzYWdlc0FmdGVyLFxuICBHZXRNZXNzYWdlc0Fyb3VuZCxcbiAgR2V0TWVzc2FnZXNCZWZvcmUsXG4gIEdldE1lc3NhZ2VzTGltaXQsXG59IGZyb20gXCIuLi8uLi90eXBlcy9tZXNzYWdlcy9nZXRfbWVzc2FnZXMudHNcIjtcbmltcG9ydCB0eXBlIHsgTWVzc2FnZSB9IGZyb20gXCIuLi8uLi90eXBlcy9tZXNzYWdlcy9tZXNzYWdlLnRzXCI7XG5pbXBvcnQgeyBlbmRwb2ludHMgfSBmcm9tIFwiLi4vLi4vdXRpbC9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMgfSBmcm9tIFwiLi4vLi4vdXRpbC9wZXJtaXNzaW9ucy50c1wiO1xuXG4vKiogRmV0Y2hlcyBiZXR3ZWVuIDItMTAwIG1lc3NhZ2VzLiBSZXF1aXJlcyBWSUVXX0NIQU5ORUwgYW5kIFJFQURfTUVTU0FHRV9ISVNUT1JZICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXMoXG4gIGNoYW5uZWxJZDogYmlnaW50LFxuICBvcHRpb25zPzpcbiAgICB8IEdldE1lc3NhZ2VzQWZ0ZXJcbiAgICB8IEdldE1lc3NhZ2VzQmVmb3JlXG4gICAgfCBHZXRNZXNzYWdlc0Fyb3VuZFxuICAgIHwgR2V0TWVzc2FnZXNMaW1pdCxcbikge1xuICBhd2FpdCByZXF1aXJlQm90Q2hhbm5lbFBlcm1pc3Npb25zKGNoYW5uZWxJZCwgW1xuICAgIFwiVklFV19DSEFOTkVMXCIsXG4gICAgXCJSRUFEX01FU1NBR0VfSElTVE9SWVwiLFxuICBdKTtcblxuICBpZiAob3B0aW9ucz8ubGltaXQgJiYgKG9wdGlvbnMubGltaXQgPCAwIHx8IG9wdGlvbnMubGltaXQgPiAxMDApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKEVycm9ycy5JTlZBTElEX0dFVF9NRVNTQUdFU19MSU1JVCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXN0LnJ1bk1ldGhvZDxNZXNzYWdlW10+KFxuICAgIFwiZ2V0XCIsXG4gICAgZW5kcG9pbnRzLkNIQU5ORUxfTUVTU0FHRVMoY2hhbm5lbElkKSxcbiAgICBvcHRpb25zLFxuICApO1xuXG4gIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChcbiAgICByZXN1bHQubWFwKChyZXMpID0+IHN0cnVjdHVyZXMuY3JlYXRlRGlzY29yZGVub01lc3NhZ2UocmVzKSksXG4gICk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQVMsSUFBSSxTQUFRLGtCQUFvQjtTQUNoQyxVQUFVLFNBQVEsdUJBQXlCO1NBQzNDLE1BQU0sU0FBUSxnQ0FBa0M7U0FRaEQsU0FBUyxTQUFRLHVCQUF5QjtTQUMxQyw0QkFBNEIsU0FBUSx5QkFBMkI7QUFFeEUsRUFBcUYsQUFBckYsaUZBQXFGLEFBQXJGLEVBQXFGLHVCQUMvRCxXQUFXLENBQy9CLFNBQWlCLEVBQ2pCLE9BSW9CO1VBRWQsNEJBQTRCLENBQUMsU0FBUztTQUMxQyxZQUFjO1NBQ2Qsb0JBQXNCOztRQUdwQixPQUFPLEVBQUUsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRztrQkFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQywwQkFBMEI7O1VBRzdDLE1BQU0sU0FBUyxJQUFJLENBQUMsU0FBUyxFQUNqQyxHQUFLLEdBQ0wsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsR0FDcEMsT0FBTztpQkFHSSxPQUFPLENBQUMsR0FBRyxDQUN0QixNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBSyxVQUFVLENBQUMsdUJBQXVCLENBQUMsR0FBRyJ9
