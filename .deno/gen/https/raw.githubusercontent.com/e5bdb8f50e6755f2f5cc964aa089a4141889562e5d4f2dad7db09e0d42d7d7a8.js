import { eventHandlers } from "../../bot.ts";
import { cacheHandlers } from "../../cache.ts";
import { structures } from "../../structures/mod.ts";
import { snowflakeToBigint } from "../../util/bigint.ts";
export async function handleVoiceStateUpdate(data) {
  const payload = data.d;
  if (!payload.guildId) return;
  const guild = await cacheHandlers.get(
    "guilds",
    snowflakeToBigint(payload.guildId),
  );
  if (!guild) return;
  const member = payload.member
    ? await structures.createDiscordenoMember(payload.member, guild.id)
    : await cacheHandlers.get("members", snowflakeToBigint(payload.userId));
  if (!member) return;
  // No cached state before so lets make one for em
  const cachedState = guild.voiceStates.get(snowflakeToBigint(payload.userId));
  guild.voiceStates.set(
    snowflakeToBigint(payload.userId),
    await structures.createDiscordenoVoiceState(guild.id, payload),
  );
  await cacheHandlers.set("guilds", guild.id, guild);
  if (
    cachedState?.channelId !== (payload.channelId
      ? snowflakeToBigint(payload.channelId)
      : null)
  ) {
    // Either joined or moved channels
    if (payload.channelId) {
      if (cachedState?.channelId) {
        eventHandlers.voiceChannelSwitch?.(
          member,
          snowflakeToBigint(payload.channelId),
          cachedState.channelId,
        );
      } else {
        eventHandlers.voiceChannelJoin?.(
          member,
          snowflakeToBigint(payload.channelId),
        );
      }
    } else if (cachedState?.channelId) {
      guild.voiceStates.delete(snowflakeToBigint(payload.userId));
      eventHandlers.voiceChannelLeave?.(member, cachedState.channelId);
    }
  }
  eventHandlers.voiceStateUpdate?.(member, payload);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZGlzY29yZGVuby9kaXNjb3JkZW5vL21haW4vc3JjL2hhbmRsZXJzL3ZvaWNlL1ZPSUNFX1NUQVRFX1VQREFURS50cz4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXZlbnRIYW5kbGVycyB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IGNhY2hlSGFuZGxlcnMgfSBmcm9tIFwiLi4vLi4vY2FjaGUudHNcIjtcbmltcG9ydCB7IHN0cnVjdHVyZXMgfSBmcm9tIFwiLi4vLi4vc3RydWN0dXJlcy9tb2QudHNcIjtcbmltcG9ydCB0eXBlIHsgRGlzY29yZEdhdGV3YXlQYXlsb2FkIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2dhdGV3YXkvZ2F0ZXdheV9wYXlsb2FkLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFZvaWNlU3RhdGUgfSBmcm9tIFwiLi4vLi4vdHlwZXMvdm9pY2Uvdm9pY2Vfc3RhdGUudHNcIjtcbmltcG9ydCB7IHNub3dmbGFrZVRvQmlnaW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvYmlnaW50LnRzXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVWb2ljZVN0YXRlVXBkYXRlKGRhdGE6IERpc2NvcmRHYXRld2F5UGF5bG9hZCkge1xuICBjb25zdCBwYXlsb2FkID0gZGF0YS5kIGFzIFZvaWNlU3RhdGU7XG4gIGlmICghcGF5bG9hZC5ndWlsZElkKSByZXR1cm47XG5cbiAgY29uc3QgZ3VpbGQgPSBhd2FpdCBjYWNoZUhhbmRsZXJzLmdldChcbiAgICBcImd1aWxkc1wiLFxuICAgIHNub3dmbGFrZVRvQmlnaW50KHBheWxvYWQuZ3VpbGRJZCksXG4gICk7XG4gIGlmICghZ3VpbGQpIHJldHVybjtcblxuICBjb25zdCBtZW1iZXIgPSBwYXlsb2FkLm1lbWJlclxuICAgID8gYXdhaXQgc3RydWN0dXJlcy5jcmVhdGVEaXNjb3JkZW5vTWVtYmVyKFxuICAgICAgcGF5bG9hZC5tZW1iZXIsXG4gICAgICBndWlsZC5pZCxcbiAgICApXG4gICAgOiBhd2FpdCBjYWNoZUhhbmRsZXJzLmdldChcIm1lbWJlcnNcIiwgc25vd2ZsYWtlVG9CaWdpbnQocGF5bG9hZC51c2VySWQpKTtcbiAgaWYgKCFtZW1iZXIpIHJldHVybjtcblxuICAvLyBObyBjYWNoZWQgc3RhdGUgYmVmb3JlIHNvIGxldHMgbWFrZSBvbmUgZm9yIGVtXG4gIGNvbnN0IGNhY2hlZFN0YXRlID0gZ3VpbGQudm9pY2VTdGF0ZXMuZ2V0KHNub3dmbGFrZVRvQmlnaW50KHBheWxvYWQudXNlcklkKSk7XG5cbiAgZ3VpbGQudm9pY2VTdGF0ZXMuc2V0KFxuICAgIHNub3dmbGFrZVRvQmlnaW50KHBheWxvYWQudXNlcklkKSxcbiAgICBhd2FpdCBzdHJ1Y3R1cmVzLmNyZWF0ZURpc2NvcmRlbm9Wb2ljZVN0YXRlKGd1aWxkLmlkLCBwYXlsb2FkKSxcbiAgKTtcblxuICBhd2FpdCBjYWNoZUhhbmRsZXJzLnNldChcImd1aWxkc1wiLCBndWlsZC5pZCwgZ3VpbGQpO1xuXG4gIGlmIChcbiAgICBjYWNoZWRTdGF0ZT8uY2hhbm5lbElkICE9PVxuICAgICAgKHBheWxvYWQuY2hhbm5lbElkID8gc25vd2ZsYWtlVG9CaWdpbnQocGF5bG9hZC5jaGFubmVsSWQpIDogbnVsbClcbiAgKSB7XG4gICAgLy8gRWl0aGVyIGpvaW5lZCBvciBtb3ZlZCBjaGFubmVsc1xuICAgIGlmIChwYXlsb2FkLmNoYW5uZWxJZCkge1xuICAgICAgaWYgKGNhY2hlZFN0YXRlPy5jaGFubmVsSWQpIHsgLy8gV2FzIGluIGEgY2hhbm5lbCBiZWZvcmVcbiAgICAgICAgZXZlbnRIYW5kbGVycy52b2ljZUNoYW5uZWxTd2l0Y2g/LihcbiAgICAgICAgICBtZW1iZXIsXG4gICAgICAgICAgc25vd2ZsYWtlVG9CaWdpbnQocGF5bG9hZC5jaGFubmVsSWQpLFxuICAgICAgICAgIGNhY2hlZFN0YXRlLmNoYW5uZWxJZCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7IC8vIFdhcyBub3QgaW4gYSBjaGFubmVsIGJlZm9yZSBzbyB1c2VyIGp1c3Qgam9pbmVkXG4gICAgICAgIGV2ZW50SGFuZGxlcnMudm9pY2VDaGFubmVsSm9pbj8uKFxuICAgICAgICAgIG1lbWJlcixcbiAgICAgICAgICBzbm93Zmxha2VUb0JpZ2ludChwYXlsb2FkLmNoYW5uZWxJZCksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSAvLyBMZWZ0IHRoZSBjaGFubmVsXG4gICAgZWxzZSBpZiAoY2FjaGVkU3RhdGU/LmNoYW5uZWxJZCkge1xuICAgICAgZ3VpbGQudm9pY2VTdGF0ZXMuZGVsZXRlKHNub3dmbGFrZVRvQmlnaW50KHBheWxvYWQudXNlcklkKSk7XG4gICAgICBldmVudEhhbmRsZXJzLnZvaWNlQ2hhbm5lbExlYXZlPy4obWVtYmVyLCBjYWNoZWRTdGF0ZS5jaGFubmVsSWQpO1xuICAgIH1cbiAgfVxuXG4gIGV2ZW50SGFuZGxlcnMudm9pY2VTdGF0ZVVwZGF0ZT8uKG1lbWJlciwgcGF5bG9hZCk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQVMsYUFBYSxTQUFRLFlBQWM7U0FDbkMsYUFBYSxTQUFRLGNBQWdCO1NBQ3JDLFVBQVUsU0FBUSx1QkFBeUI7U0FHM0MsaUJBQWlCLFNBQVEsb0JBQXNCO3NCQUVsQyxzQkFBc0IsQ0FBQyxJQUEyQjtVQUNoRSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDakIsT0FBTyxDQUFDLE9BQU87VUFFZCxLQUFLLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFDbkMsTUFBUSxHQUNSLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxPQUFPO1NBRTlCLEtBQUs7VUFFSixNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sU0FDbkIsVUFBVSxDQUFDLHNCQUFzQixDQUN2QyxPQUFPLENBQUMsTUFBTSxFQUNkLEtBQUssQ0FBQyxFQUFFLFVBRUYsYUFBYSxDQUFDLEdBQUcsRUFBQyxPQUFTLEdBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU07U0FDbEUsTUFBTTtJQUVYLEVBQWlELEFBQWpELCtDQUFpRDtVQUMzQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU07SUFFMUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ25CLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLFNBQzFCLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU87VUFHekQsYUFBYSxDQUFDLEdBQUcsRUFBQyxNQUFRLEdBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLO1FBRy9DLFdBQVcsRUFBRSxTQUFTLE1BQ25CLE9BQU8sQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxJQUFJO1FBRWxFLEVBQWtDLEFBQWxDLGdDQUFrQztZQUM5QixPQUFPLENBQUMsU0FBUztnQkFDZixXQUFXLEVBQUUsU0FBUztnQkFDeEIsYUFBYSxDQUFDLGtCQUFrQixHQUM5QixNQUFNLEVBQ04saUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FDbkMsV0FBVyxDQUFDLFNBQVM7O2dCQUd2QixhQUFhLENBQUMsZ0JBQWdCLEdBQzVCLE1BQU0sRUFDTixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsU0FBUzs7bUJBSWhDLFdBQVcsRUFBRSxTQUFTO1lBQzdCLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNO1lBQ3pELGFBQWEsQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLEVBQUUsV0FBVyxDQUFDLFNBQVM7OztJQUluRSxhQUFhLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxFQUFFLE9BQU8ifQ==
