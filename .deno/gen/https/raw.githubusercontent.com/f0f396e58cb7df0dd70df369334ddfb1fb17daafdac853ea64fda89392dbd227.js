import { Collection } from "./util/collection.ts";
export const cache = {
    isReady: false,
    /** All of the guild objects the bot has access to, mapped by their Ids */ guilds: new Collection(),
    /** All of the channel objects the bot has access to, mapped by their Ids */ channels: new Collection(),
    /** All of the message objects the bot has cached since the bot acquired `READY` state, mapped by their Ids */ messages: new Collection(),
    /** All of the member objects that have been cached since the bot acquired `READY` state, mapped by their Ids */ members: new Collection(),
    /** All of the unavailable guilds, mapped by their Ids (id, timestamp) */ unavailableGuilds: new Collection(),
    /** All of the presence update objects received in PRESENCE_UPDATE gateway event, mapped by their user Id */ presences: new Collection(),
    fetchAllMembersProcessingRequests: new Collection(),
    executedSlashCommands: new Set(),
    get emojis () {
        return new Collection(this.guilds.reduce((a, b)=>[
                ...a,
                ...b.emojis.map((e)=>[
                        e.id,
                        e
                    ]
                )
            ]
        , []));
    }
};
export let cacheHandlers = {
    /** Deletes all items from the cache */ async clear (table) {
        return cache[table].clear();
    },
    /** Deletes 1 item from cache using the key */ async delete (table, key) {
        return cache[table].delete(key);
    },
    /** Check if something exists in cache with a key */ async has (table, key) {
        return cache[table].has(key);
    },
    /** Get the number of key-value pairs */ async size (table) {
        return cache[table].size;
    },
    // Done differently to have overloads
    /** Add a key value pair to the cache */ set,
    /** Get the value from the cache using its key */ get,
    /** Run a function on all items in this cache */ forEach,
    /** Allows you to filter our all items in this cache. */ filter
};
async function set(table, key, value) {
    return cache[table].set(key, value);
}
async function get(table, key) {
    return cache[table].get(key);
}
function forEach(table, callback) {
    return cache[table].forEach(callback);
}
async function filter(table, callback) {
    return cache[table].filter(callback);
}
//# sourceMappingURL=data:application/json;base64,