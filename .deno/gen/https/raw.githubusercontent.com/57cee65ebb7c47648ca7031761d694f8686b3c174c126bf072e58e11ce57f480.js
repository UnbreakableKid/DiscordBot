import { USER_AGENT } from "../util/constants.ts";
import { rest } from "./rest.ts";
/** Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord. */ export function createRequestBody(
  queuedRequest,
) {
  const headers = {
    Authorization: rest.token,
    "User-Agent": USER_AGENT,
  };
  // GET METHODS SHOULD NOT HAVE A BODY
  if (queuedRequest.request.method.toUpperCase() === "GET") {
    queuedRequest.payload.body = undefined;
  }
  // IF A REASON IS PROVIDED ENCODE IT IN HEADERS
  if (queuedRequest.payload.body?.reason) {
    headers["X-Audit-Log-Reason"] = encodeURIComponent(
      queuedRequest.payload.body.reason,
    );
  }
  // IF A FILE/ATTACHMENT IS PRESENT WE NEED SPECIAL HANDLING
  if (queuedRequest.payload.body?.file) {
    if (!Array.isArray(queuedRequest.payload.body.file)) {
      queuedRequest.payload.body.file = [
        queuedRequest.payload.body.file,
      ];
    }
    const form = new FormData();
    for (let i = 0; i < queuedRequest.payload.body.file.length; i++) {
      form.append(
        `file${i}`,
        queuedRequest.payload.body.file[i].blob,
        queuedRequest.payload.body.file[i].name,
      );
    }
    form.append(
      "payload_json",
      JSON.stringify({
        ...queuedRequest.payload.body,
        file: undefined,
      }),
    );
    queuedRequest.payload.body.file = form;
  } else if (
    queuedRequest.payload.body && ![
      "GET",
      "DELETE",
    ].includes(queuedRequest.request.method)
  ) {
    headers["Content-Type"] = "application/json";
  }
  return {
    headers,
    body: queuedRequest.payload.body?.file ||
      JSON.stringify(queuedRequest.payload.body),
    method: queuedRequest.request.method.toUpperCase(),
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZGlzY29yZGVuby9kaXNjb3JkZW5vL21haW4vc3JjL3Jlc3QvY3JlYXRlX3JlcXVlc3RfYm9keS50cz4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGaWxlQ29udGVudCB9IGZyb20gXCIuLi90eXBlcy9kaXNjb3JkZW5vL2ZpbGVfY29udGVudC50c1wiO1xuaW1wb3J0IHsgVVNFUl9BR0VOVCB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50cy50c1wiO1xuaW1wb3J0IHsgcmVzdCwgUmVzdFBheWxvYWQsIFJlc3RSZXF1ZXN0IH0gZnJvbSBcIi4vcmVzdC50c1wiO1xuXG4vKiogQ3JlYXRlcyB0aGUgcmVxdWVzdCBib2R5IGFuZCBoZWFkZXJzIHRoYXQgYXJlIG5lY2Vzc2FyeSB0byBzZW5kIGEgcmVxdWVzdC4gV2lsbCBoYW5kbGUgZGlmZmVyZW50IHR5cGVzIG9mIG1ldGhvZHMgYW5kIGV2ZXJ5dGhpbmcgbmVjZXNzYXJ5IGZvciBkaXNjb3JkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RCb2R5KHF1ZXVlZFJlcXVlc3Q6IHtcbiAgcmVxdWVzdDogUmVzdFJlcXVlc3Q7XG4gIHBheWxvYWQ6IFJlc3RQYXlsb2FkO1xufSkge1xuICBjb25zdCBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIEF1dGhvcml6YXRpb246IHJlc3QudG9rZW4sXG4gICAgXCJVc2VyLUFnZW50XCI6IFVTRVJfQUdFTlQsXG4gIH07XG5cbiAgLy8gR0VUIE1FVEhPRFMgU0hPVUxEIE5PVCBIQVZFIEEgQk9EWVxuICBpZiAocXVldWVkUmVxdWVzdC5yZXF1ZXN0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSBcIkdFVFwiKSB7XG4gICAgcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJRiBBIFJFQVNPTiBJUyBQUk9WSURFRCBFTkNPREUgSVQgSU4gSEVBREVSU1xuICBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHk/LnJlYXNvbikge1xuICAgIGhlYWRlcnNbXCJYLUF1ZGl0LUxvZy1SZWFzb25cIl0gPSBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5yZWFzb24gYXMgc3RyaW5nLFxuICAgICk7XG4gIH1cblxuICAvLyBJRiBBIEZJTEUvQVRUQUNITUVOVCBJUyBQUkVTRU5UIFdFIE5FRUQgU1BFQ0lBTCBIQU5ETElOR1xuICBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHk/LmZpbGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSkpIHtcbiAgICAgIHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGUgPSBbcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZV07XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKS5sZW5ndGg7XG4gICAgICBpKytcbiAgICApIHtcbiAgICAgIGZvcm0uYXBwZW5kKFxuICAgICAgICBgZmlsZSR7aX1gLFxuICAgICAgICAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKVtpXS5ibG9iLFxuICAgICAgICAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKVtpXS5uYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3JtLmFwcGVuZChcbiAgICAgIFwicGF5bG9hZF9qc29uXCIsXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IC4uLnF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LCBmaWxlOiB1bmRlZmluZWQgfSksXG4gICAgKTtcbiAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5maWxlID0gZm9ybTtcbiAgfSBlbHNlIGlmIChcbiAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keSAmJlxuICAgICFbXCJHRVRcIiwgXCJERUxFVEVcIl0uaW5jbHVkZXMocXVldWVkUmVxdWVzdC5yZXF1ZXN0Lm1ldGhvZClcbiAgKSB7XG4gICAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXJzLFxuICAgIGJvZHk6IChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keT8uZmlsZSB8fFxuICAgICAgSlNPTi5zdHJpbmdpZnkocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkpKSBhcyBGb3JtRGF0YSB8IHN0cmluZyxcbiAgICBtZXRob2Q6IHF1ZXVlZFJlcXVlc3QucmVxdWVzdC5tZXRob2QudG9VcHBlckNhc2UoKSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiU0FDUyxVQUFVLFNBQVEsb0JBQXNCO1NBQ3hDLElBQUksU0FBa0MsU0FBVztBQUUxRCxFQUE4SixBQUE5SiwwSkFBOEosQUFBOUosRUFBOEosaUJBQzlJLGlCQUFpQixDQUFDLGFBR2pDO1VBQ08sT0FBTztRQUNYLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSztTQUN6QixVQUFZLEdBQUUsVUFBVTs7SUFHMUIsRUFBcUMsQUFBckMsbUNBQXFDO1FBQ2pDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsUUFBTyxHQUFLO1FBQ3RELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLFNBQVM7O0lBR3hDLEVBQStDLEFBQS9DLDZDQUErQztRQUMzQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNO1FBQ3BDLE9BQU8sRUFBQyxrQkFBb0IsS0FBSSxrQkFBa0IsQ0FDaEQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTTs7SUFJckMsRUFBMkQsQUFBM0QseURBQTJEO1FBQ3ZELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUk7YUFDN0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ2hELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUk7Z0JBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSTs7O2NBRzlELElBQUksT0FBTyxRQUFRO2dCQUduQixDQUFDLEdBQUcsQ0FBQyxFQUNULENBQUMsR0FBSSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQW1CLE1BQU0sRUFDN0QsQ0FBQztZQUVELElBQUksQ0FBQyxNQUFNLEVBQ1IsSUFBSSxFQUFFLENBQUMsSUFDUCxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQW1CLENBQUMsRUFBRSxJQUFJLEVBQ3pELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBbUIsQ0FBQyxFQUFFLElBQUk7O1FBSTlELElBQUksQ0FBQyxNQUFNLEVBQ1QsWUFBYyxHQUNkLElBQUksQ0FBQyxTQUFTO2VBQU0sYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQUUsSUFBSSxFQUFFLFNBQVM7O1FBRWpFLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJO2VBRXRDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSTtTQUN4QixHQUFLO1NBQUUsTUFBUTtNQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU07UUFFeEQsT0FBTyxFQUFDLFlBQWMsTUFBSSxnQkFBa0I7OztRQUk1QyxPQUFPO1FBQ1AsSUFBSSxFQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksSUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDM0MsTUFBTSxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcifQ==
