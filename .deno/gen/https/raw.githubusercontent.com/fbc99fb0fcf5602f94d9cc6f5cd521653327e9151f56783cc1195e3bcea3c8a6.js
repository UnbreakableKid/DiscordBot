import { botId, eventHandlers } from "../bot.ts";
import { cache, cacheHandlers } from "../cache.ts";
import { deleteGuild } from "../helpers/guilds/delete_guild.ts";
import { editGuild } from "../helpers/guilds/edit_guild.ts";
import { getAuditLogs } from "../helpers/guilds/get_audit_logs.ts";
import { getBan } from "../helpers/guilds/get_ban.ts";
import { getBans } from "../helpers/guilds/get_bans.ts";
import { guildBannerURL } from "../helpers/guilds/guild_banner_url.ts";
import { guildIconURL } from "../helpers/guilds/guild_icon_url.ts";
import { guildSplashURL } from "../helpers/guilds/guild_splash_url.ts";
import { leaveGuild } from "../helpers/guilds/leave_guild.ts";
import { getInvites } from "../helpers/invites/get_invites.ts";
import { banMember } from "../helpers/members/ban_member.ts";
import { unbanMember } from "../helpers/members/unban_member.ts";
import { DiscordGuildFeatures } from "../types/guilds/guild_features.ts";
import { snowflakeToBigint } from "../util/bigint.ts";
import { cacheMembers } from "../util/cache_members.ts";
import { Collection } from "../util/collection.ts";
import { iconHashToBigInt } from "../util/hash.ts";
import { createNewProp } from "../util/utils.ts";
import { structures } from "./mod.ts";
const GUILD_SNOWFLAKES = [
    "id",
    "ownerId",
    "permissions",
    "afkChannelId",
    "widgetChannelId",
    "applicationId",
    "systemChannelId",
    "rulesChannelId",
    "publicUpdatesChannelId", 
];
export const guildToggles = {
    /** Whether this user is owner of this guild */ owner: 1n,
    /** Whether the guild widget is enabled */ widgetEnabled: 2n,
    /** Whether this is a large guild */ large: 4n,
    /** Whether this guild is unavailable due to an outage */ unavailable: 8n,
    /** Whether this server is an nsfw guild */ nsfw: 16n,
    /** Whether this server's icon is animated */ animatedIcon: 32n,
    /** Whether this server's banner is animated. */ animatedBanner: 64n,
    /** Whether this server's splash is animated. */ animatedSplash: 128n
};
const baseGuild = {
    get members () {
        return cache.members.filter((member)=>member.guilds.has(this.id)
        );
    },
    get channels () {
        return cache.channels.filter((channel)=>channel.guildId === this.id
        );
    },
    get afkChannel () {
        return cache.channels.get(this.afkChannelId);
    },
    get publicUpdatesChannel () {
        return cache.channels.get(this.publicUpdatesChannelId);
    },
    get rulesChannel () {
        return cache.channels.get(this.rulesChannelId);
    },
    get systemChannel () {
        return cache.channels.get(this.systemChannelId);
    },
    get bot () {
        return cache.members.get(botId);
    },
    get botMember () {
        return this.bot?.guilds.get(this.id);
    },
    get botVoice () {
        return this.voiceStates?.get(botId);
    },
    get owner () {
        return cache.members.get(this.ownerId);
    },
    get partnered () {
        return Boolean(this.features?.includes(DiscordGuildFeatures.Partnered));
    },
    get verified () {
        return Boolean(this.features?.includes(DiscordGuildFeatures.Verified));
    },
    bannerURL (size, format) {
        return guildBannerURL(this.id, {
            banner: this.banner,
            size,
            format,
            animated: this.animatedBanner
        });
    },
    splashURL (size, format) {
        return guildSplashURL(this.id, {
            splash: this.splash,
            size,
            format,
            animated: this.animatedSplash
        });
    },
    delete () {
        return deleteGuild(this.id);
    },
    edit (options) {
        return editGuild(this.id, options);
    },
    auditLogs (options) {
        return getAuditLogs(this.id, options);
    },
    getBan (memberId) {
        return getBan(this.id, memberId);
    },
    bans () {
        return getBans(this.id);
    },
    ban (memberId, options) {
        return banMember(this.id, memberId, options);
    },
    unban (memberId) {
        return unbanMember(this.id, memberId);
    },
    invites () {
        return getInvites(this.id);
    },
    iconURL (size, format) {
        return guildIconURL(this.id, {
            icon: this.icon,
            size,
            format,
            animated: this.animatedIcon
        });
    },
    leave () {
        return leaveGuild(this.id);
    },
    get isOwner () {
        return Boolean(this.bitfield & guildToggles.owner);
    },
    get widgetEnabled () {
        return Boolean(this.bitfield & guildToggles.widgetEnabled);
    },
    get large () {
        return Boolean(this.bitfield & guildToggles.large);
    },
    get unavailable () {
        return Boolean(this.bitfield & guildToggles.unavailable);
    },
    get nsfw () {
        return Boolean(this.bitfield & guildToggles.nsfw);
    },
    get animatedIcon () {
        return Boolean(this.bitfield & guildToggles.animatedIcon);
    },
    get animatedBanner () {
        return Boolean(this.bitfield & guildToggles.animatedBanner);
    },
    get animatedSplash () {
        return Boolean(this.bitfield & guildToggles.animatedSplash);
    }
};
export async function createDiscordenoGuild(data, shardId) {
    const { memberCount =0 , voiceStates =[] , channels =[] , threads =[] , presences =[] , joinedAt ="" , emojis , members =[] , icon , splash , banner , ...rest } = data;
    let bitfield = 0n;
    const guildId = snowflakeToBigint(rest.id);
    const roles = await Promise.all((data.roles || []).map((role)=>structures.createDiscordenoRole({
            role,
            guildId
        })
    ));
    const voiceStateStructs = await Promise.all(voiceStates.map((vs)=>structures.createDiscordenoVoiceState(guildId, vs)
    ));
    await Promise.all([
        ...channels,
        ...threads
    ].map(async (channel)=>{
        const discordenoChannel = await structures.createDiscordenoChannel(channel, guildId);
        return await cacheHandlers.set("channels", discordenoChannel.id, discordenoChannel);
    }));
    const props = {
    };
    for (const [key, value] of Object.entries(rest)){
        eventHandlers.debug?.("loop", `Running for of loop in createDiscordenoGuild function.`);
        const toggleBits = guildToggles[key];
        if (toggleBits) {
            bitfield |= value ? toggleBits : 0n;
            continue;
        }
        props[key] = createNewProp(GUILD_SNOWFLAKES.includes(key) ? value ? snowflakeToBigint(value) : undefined : value);
    }
    const hashes = [
        {
            name: "icon",
            toggle: guildToggles.animatedIcon,
            value: icon
        },
        {
            name: "banner",
            toggle: guildToggles.animatedBanner,
            value: banner
        },
        {
            name: "splash",
            toggle: guildToggles.animatedSplash,
            value: splash
        }, 
    ];
    for (const hash of hashes){
        const transformed = hash.value ? iconHashToBigInt(hash.value) : undefined;
        if (transformed) {
            props[hash.name] = createNewProp(hash.value);
            if (transformed.animated) bitfield |= hash.toggle;
        }
    }
    const guild = Object.create(baseGuild, {
        ...props,
        shardId: createNewProp(shardId),
        roles: createNewProp(new Collection(roles.map((r)=>[
                r.id,
                r
            ]
        ))),
        joinedAt: createNewProp(Date.parse(joinedAt)),
        presences: createNewProp(new Collection(presences.map((p)=>[
                snowflakeToBigint(p.user.id),
                p
            ]
        ))),
        memberCount: createNewProp(memberCount),
        emojis: createNewProp(new Collection((emojis || []).map((emoji)=>[
                emoji.id ? snowflakeToBigint(emoji.id) : emoji.name,
                emoji
            ]
        ))),
        voiceStates: createNewProp(new Collection(voiceStateStructs.map((vs)=>[
                vs.userId,
                vs
            ]
        ))),
        bitfield: createNewProp(bitfield)
    });
    await cacheMembers(guild.id, members);
    return guild;
}
//# sourceMappingURL=data:application/json;base64,