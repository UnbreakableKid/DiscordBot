import { eventHandlers } from "../bot.ts";
import { cache } from "../cache.ts";
import { deleteRole } from "../helpers/roles/delete_role.ts";
import { editRole } from "../helpers/roles/edit_role.ts";
import { Errors } from "../types/discordeno/errors.ts";
import { snowflakeToBigint } from "../util/bigint.ts";
import { highestRole } from "../util/permissions.ts";
import { createNewProp } from "../util/utils.ts";
const ROLE_SNOWFLAKES = [
    "id",
    "botId",
    "integrationId",
    "guildId", 
];
const roleToggles = {
    /** If this role is showed seperately in the user listing */ hoist: 1n,
    /** Whether this role is managed by an integration */ managed: 2n,
    /** Whether this role is mentionable */ mentionable: 4n,
    /** If this role is the nitro boost role. */ isNitroBoostRole: 8n
};
const baseRole = {
    get guild () {
        return cache.guilds.get(this.guildId);
    },
    get hexColor () {
        return this.color.toString(16);
    },
    get members () {
        return cache.members.filter((m)=>m.guilds.some((g)=>g.roles.includes(this.id)
            )
        );
    },
    get mention () {
        return `<@&${this.id}>`;
    },
    // METHODS
    delete () {
        return deleteRole(this.guildId, this.id);
    },
    edit (options) {
        return editRole(this.guildId, this.id, options);
    },
    higherThanRole (roleId, position) {
        // If no position try and find one from cache
        if (!position) position = this.guild?.roles.get(roleId)?.position;
        // If still none error out.
        if (!position) {
            throw new Error("role.higherThanRoleId() did not have a position provided and the role or guild was not found in cache. Please provide a position like role.higherThanRoleId(roleId, position)");
        }
        // Rare edge case handling
        if (this.position === position) {
            return this.id < roleId;
        }
        return this.position > position;
    },
    async higherThanMember (memberId) {
        const guild = this.guild;
        if (!guild) throw new Error(Errors.GUILD_NOT_FOUND);
        if (guild.ownerId === memberId) return false;
        const memberHighestRole = await highestRole(guild, memberId);
        return this.higherThanRole(memberHighestRole.id, memberHighestRole.position);
    },
    get hoist () {
        return Boolean(this.bitfield & roleToggles.hoist);
    },
    get managed () {
        return Boolean(this.bitfield & roleToggles.managed);
    },
    get mentionable () {
        return Boolean(this.bitfield & roleToggles.mentionable);
    },
    get isNitroBoostRole () {
        return Boolean(this.bitfield & roleToggles.isNitroBoostRole);
    }
};
// deno-lint-ignore require-await
export async function createDiscordenoRole(data) {
    const { tags ={
    } , ...rest } = {
        guildId: data.guildId,
        ...data.role
    };
    let bitfield = 0n;
    const props = {
    };
    for (const [key, value] of Object.entries(rest)){
        eventHandlers.debug?.("loop", `Running for of loop in createDiscordenoRole function.`);
        const toggleBits = roleToggles[key];
        if (toggleBits) {
            bitfield |= value ? toggleBits : 0n;
            continue;
        }
        props[key] = createNewProp(ROLE_SNOWFLAKES.includes(key) ? value ? snowflakeToBigint(value) : undefined : value);
    }
    const role = Object.create(baseRole, {
        ...props,
        botId: createNewProp(tags.botId ? snowflakeToBigint(tags.botId) : undefined),
        isNitroBoostRole: createNewProp("premiumSubscriber" in tags),
        integrationId: createNewProp(tags.integrationId ? snowflakeToBigint(tags.integrationId) : undefined),
        bitfield: createNewProp(bitfield)
    });
    return role;
}
//# sourceMappingURL=data:application/json;base64,