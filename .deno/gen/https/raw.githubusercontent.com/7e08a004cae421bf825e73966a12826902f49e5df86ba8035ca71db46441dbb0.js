import { eventHandlers } from "../../bot.ts";
import { cacheHandlers } from "../../cache.ts";
import { snowflakeToBigint } from "../../util/bigint.ts";
export async function handleGuildRoleDelete(data) {
    const payload = data.d;
    const guild = await cacheHandlers.get("guilds", snowflakeToBigint(payload.guildId));
    if (!guild) return;
    const roleId = snowflakeToBigint(payload.roleId);
    const cachedRole = guild.roles.get(roleId);
    guild.roles.delete(roleId);
    if (cachedRole) eventHandlers.roleDelete?.(guild, cachedRole);
    // For bots without GUILD_MEMBERS member.roles is never updated breaking permissions checking.
    cacheHandlers.forEach("members", (member)=>{
        eventHandlers.debug?.("loop", `1. Running forEach members loop in GUILD_ROLE_DELETE file.`);
        // Not in the relevant guild so just skip.
        if (!member.guilds.has(guild.id)) return;
        member.guilds.forEach((g)=>{
            eventHandlers.debug?.("loop", `2. Running forEach loop in CHANNEL_DELTE file.`);
            // Member does not have this role
            if (!g.roles.includes(roleId)) return;
            // Remove this role from the members cache
            g.roles = g.roles.filter((id)=>id !== roleId
            );
            cacheHandlers.set("members", member.id, member);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZGlzY29yZGVuby9kaXNjb3JkZW5vL21haW4vc3JjL2hhbmRsZXJzL3JvbGVzL0dVSUxEX1JPTEVfREVMRVRFLnRzPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldmVudEhhbmRsZXJzIH0gZnJvbSBcIi4uLy4uL2JvdC50c1wiO1xuaW1wb3J0IHsgY2FjaGVIYW5kbGVycyB9IGZyb20gXCIuLi8uLi9jYWNoZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBEaXNjb3JkR2F0ZXdheVBheWxvYWQgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZ2F0ZXdheS9nYXRld2F5X3BheWxvYWQudHNcIjtcbmltcG9ydCB0eXBlIHsgR3VpbGRSb2xlRGVsZXRlIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2d1aWxkcy9ndWlsZF9yb2xlX2RlbGV0ZS50c1wiO1xuaW1wb3J0IHsgc25vd2ZsYWtlVG9CaWdpbnQgfSBmcm9tIFwiLi4vLi4vdXRpbC9iaWdpbnQudHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUd1aWxkUm9sZURlbGV0ZShkYXRhOiBEaXNjb3JkR2F0ZXdheVBheWxvYWQpIHtcbiAgY29uc3QgcGF5bG9hZCA9IGRhdGEuZCBhcyBHdWlsZFJvbGVEZWxldGU7XG4gIGNvbnN0IGd1aWxkID0gYXdhaXQgY2FjaGVIYW5kbGVycy5nZXQoXG4gICAgXCJndWlsZHNcIixcbiAgICBzbm93Zmxha2VUb0JpZ2ludChwYXlsb2FkLmd1aWxkSWQpLFxuICApO1xuICBpZiAoIWd1aWxkKSByZXR1cm47XG5cbiAgY29uc3Qgcm9sZUlkID0gc25vd2ZsYWtlVG9CaWdpbnQocGF5bG9hZC5yb2xlSWQpO1xuXG4gIGNvbnN0IGNhY2hlZFJvbGUgPSBndWlsZC5yb2xlcy5nZXQocm9sZUlkKSE7XG4gIGd1aWxkLnJvbGVzLmRlbGV0ZShyb2xlSWQpO1xuXG4gIGlmIChjYWNoZWRSb2xlKSBldmVudEhhbmRsZXJzLnJvbGVEZWxldGU/LihndWlsZCwgY2FjaGVkUm9sZSk7XG5cbiAgLy8gRm9yIGJvdHMgd2l0aG91dCBHVUlMRF9NRU1CRVJTIG1lbWJlci5yb2xlcyBpcyBuZXZlciB1cGRhdGVkIGJyZWFraW5nIHBlcm1pc3Npb25zIGNoZWNraW5nLlxuICBjYWNoZUhhbmRsZXJzLmZvckVhY2goXCJtZW1iZXJzXCIsIChtZW1iZXIpID0+IHtcbiAgICBldmVudEhhbmRsZXJzLmRlYnVnPy4oXG4gICAgICBcImxvb3BcIixcbiAgICAgIGAxLiBSdW5uaW5nIGZvckVhY2ggbWVtYmVycyBsb29wIGluIEdVSUxEX1JPTEVfREVMRVRFIGZpbGUuYCxcbiAgICApO1xuICAgIC8vIE5vdCBpbiB0aGUgcmVsZXZhbnQgZ3VpbGQgc28ganVzdCBza2lwLlxuICAgIGlmICghbWVtYmVyLmd1aWxkcy5oYXMoZ3VpbGQuaWQpKSByZXR1cm47XG5cbiAgICBtZW1iZXIuZ3VpbGRzLmZvckVhY2goKGcpID0+IHtcbiAgICAgIGV2ZW50SGFuZGxlcnMuZGVidWc/LihcbiAgICAgICAgXCJsb29wXCIsXG4gICAgICAgIGAyLiBSdW5uaW5nIGZvckVhY2ggbG9vcCBpbiBDSEFOTkVMX0RFTFRFIGZpbGUuYCxcbiAgICAgICk7XG4gICAgICAvLyBNZW1iZXIgZG9lcyBub3QgaGF2ZSB0aGlzIHJvbGVcbiAgICAgIGlmICghZy5yb2xlcy5pbmNsdWRlcyhyb2xlSWQpKSByZXR1cm47XG4gICAgICAvLyBSZW1vdmUgdGhpcyByb2xlIGZyb20gdGhlIG1lbWJlcnMgY2FjaGVcbiAgICAgIGcucm9sZXMgPSBnLnJvbGVzLmZpbHRlcigoaWQpID0+IGlkICE9PSByb2xlSWQpO1xuICAgICAgY2FjaGVIYW5kbGVycy5zZXQoXCJtZW1iZXJzXCIsIG1lbWJlci5pZCwgbWVtYmVyKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQVMsYUFBYSxTQUFRLFlBQWM7U0FDbkMsYUFBYSxTQUFRLGNBQWdCO1NBR3JDLGlCQUFpQixTQUFRLG9CQUFzQjtzQkFFbEMscUJBQXFCLENBQUMsSUFBMkI7VUFDL0QsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1VBQ2hCLEtBQUssU0FBUyxhQUFhLENBQUMsR0FBRyxFQUNuQyxNQUFRLEdBQ1IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE9BQU87U0FFOUIsS0FBSztVQUVKLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTTtVQUV6QyxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTTtJQUN6QyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNO1FBRXJCLFVBQVUsRUFBRSxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssRUFBRSxVQUFVO0lBRTVELEVBQThGLEFBQTlGLDRGQUE4RjtJQUM5RixhQUFhLENBQUMsT0FBTyxFQUFDLE9BQVMsSUFBRyxNQUFNO1FBQ3RDLGFBQWEsQ0FBQyxLQUFLLElBQ2pCLElBQU0sSUFDTCwwREFBMEQ7UUFFN0QsRUFBMEMsQUFBMUMsd0NBQTBDO2FBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBRS9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdEIsYUFBYSxDQUFDLEtBQUssSUFDakIsSUFBTSxJQUNMLDhDQUE4QztZQUVqRCxFQUFpQyxBQUFqQywrQkFBaUM7aUJBQzVCLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU07WUFDNUIsRUFBMEMsQUFBMUMsd0NBQTBDO1lBQzFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxHQUFLLEVBQUUsS0FBSyxNQUFNOztZQUM5QyxhQUFhLENBQUMsR0FBRyxFQUFDLE9BQVMsR0FBRSxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0ifQ==